{"ast":null,"code":"import _slicedToArray from \"/home/dude/lambda-projects/React/dark-mode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { useLocalStorage } from './useLocalStorage';\nexport var useDarkMode = function useDarkMode(key, initialValue) {\n  var _useLocalStorage = useLocalStorage(key, initialValue),\n      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n      darkMode = _useLocalStorage2[0],\n      setDarkMode = _useLocalStorage2[1];\n\n  console.log(darkMode);\n  debugger;\n  useEffect(function () {\n    if (darkMode === 'true') {\n      var element = document.querySelector(\"body\");\n      element.classList.add(\"dark-mode\");\n    } else {\n      var element = document.querySelector(\"body\");\n      element.classList.remove(\"dark-mode\");\n    }\n  }, [darkMode.status]);\n  return darkMode, setDarkMode;\n};","map":{"version":3,"sources":["/home/dude/lambda-projects/React/dark-mode/src/hooks/useDarkMode.js"],"names":["React","useState","useEffect","useLocalStorage","useDarkMode","key","initialValue","darkMode","setDarkMode","console","log","element","document","querySelector","classList","add","remove","status"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAAQC,eAAR,QAA8B,mBAA9B;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAMC,YAAN,EAAuB;AAAA,yBAChBH,eAAe,CAAEE,GAAF,EAAOC,YAAP,CADC;AAAA;AAAA,MACzCC,QADyC;AAAA,MAC/BC,WAD+B;;AAEhDC,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACA;AAEAL,EAAAA,SAAS,CAAE,YAAO;AAClB,QAAIK,QAAQ,KAAK,MAAjB,EAAyB;AACvB,UAAII,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAd;AACAF,MAAAA,OAAO,CAACG,SAAR,CAAkBC,GAAlB,CAAsB,WAAtB;AACD,KAHD,MAIK;AACJ,UAAIJ,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAd;AACCF,MAAAA,OAAO,CAACG,SAAR,CAAkBE,MAAlB,CAAyB,WAAzB;AAED;AAEF,GAXU,EAWR,CAACT,QAAQ,CAACU,MAAV,CAXQ,CAAT;AAaF,SAAOV,QAAQ,EAAEC,WAAjB;AAEC,CApBM","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {useLocalStorage} from './useLocalStorage';\n\nexport const useDarkMode = (key, initialValue) => {\n  const [darkMode, setDarkMode] = useLocalStorage( key, initialValue);\n  console.log(darkMode)\n  debugger\n\n  useEffect( () =>  {\n  if (darkMode === 'true') {\n    var element = document.querySelector(\"body\")\n    element.classList.add(\"dark-mode\")\n  }\n  else {\n   var element = document.querySelector(\"body\")\n    element.classList.remove(\"dark-mode\")\n\n  }\n\n}, [darkMode.status])\n\nreturn(darkMode, setDarkMode)\n\n}\n\n"]},"metadata":{},"sourceType":"module"}