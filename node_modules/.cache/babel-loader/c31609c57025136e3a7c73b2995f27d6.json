{"ast":null,"code":"import _slicedToArray from \"/home/dude/lambda-projects/React/dark-mode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { useLocalStorage } from './useLocalStoraage';\nexport var useDarkMode = function useDarkMode() {\n  var _useLocalStorage = useLocalStorage(\"is on\", {\n    status: 'false'\n  }),\n      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n      darkMode = _useLocalStorage2[0],\n      setDarkMode = _useLocalStorage2[1];\n\n  useEffect(function () {\n    if (darkMode.status === 'true') {\n      var element = document.querySelector(\"body\");\n      element.classList.add(\"dark-mode\");\n    } else {\n      var element = document.querySelector(\"body\");\n      element.classList.remove(\"dark-mode\");\n    }\n  }, [darkMode.status]);\n  console.log(darkMode);\n  return darkMode, setDarkMode;\n};","map":{"version":3,"sources":["/home/dude/lambda-projects/React/dark-mode/src/hooks/useDarkMode.js"],"names":["React","useState","useEffect","useLocalStorage","useDarkMode","status","darkMode","setDarkMode","element","document","querySelector","classList","add","remove","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAAQC,eAAR,QAA8B,oBAA9B;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA,yBACCD,eAAe,CAAE,OAAF,EAAW;AAACE,IAAAA,MAAM,EAAE;AAAT,GAAX,CADhB;AAAA;AAAA,MACxBC,QADwB;AAAA,MACdC,WADc;;AAG/BL,EAAAA,SAAS,CAAE,YAAO;AAClB,QAAII,QAAQ,CAACD,MAAT,KAAoB,MAAxB,EAAgC;AAC9B,UAAIG,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAd;AACAF,MAAAA,OAAO,CAACG,SAAR,CAAkBC,GAAlB,CAAsB,WAAtB;AACD,KAHD,MAIK;AACJ,UAAIJ,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAd;AACCF,MAAAA,OAAO,CAACG,SAAR,CAAkBE,MAAlB,CAAyB,WAAzB;AAED;AAEF,GAXU,EAWR,CAACP,QAAQ,CAACD,MAAV,CAXQ,CAAT;AAYFS,EAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AACA,SAAOA,QAAQ,EAAEC,WAAjB;AAEC,CAlBM","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {useLocalStorage} from './useLocalStoraage';\n\nexport const useDarkMode = () => {\n  const [darkMode, setDarkMode] = useLocalStorage( \"is on\", {status: 'false'});\n\n  useEffect( () =>  {\n  if (darkMode.status === 'true') {\n    var element = document.querySelector(\"body\")\n    element.classList.add(\"dark-mode\")\n  }\n  else {\n   var element = document.querySelector(\"body\")\n    element.classList.remove(\"dark-mode\")\n\n  }\n\n}, [darkMode.status])\nconsole.log(darkMode)\nreturn(darkMode, setDarkMode)\n\n}\n\n"]},"metadata":{},"sourceType":"module"}